---
- hosts: all
  gather_facts: no
  vars_files:
    - vars.yml
    - vault.yml
  become: true
  pre_tasks:
    - name: Stop auto update
      raw: systemctl disable apt-daily.timer

    - name: Remove all partial apt files
      raw: rm -rf /var/lib/apt/lists/partial/*

    - name: Install python for Ansible
      raw: test -e /usr/bin/python || (apt-get -y update && apt-get install -y -f python3-minimal)
      register: output
      changed_when: 'output.stdout != ""'
      become: true

    - name: Gather facts after Python is definitely present.
      setup:

    - name: Install output on error
      template:
        src: files/scripts/output-on-error
        dest: /usr/bin/output-on-error
        mode: 0777
      become_user: root

  roles:
    - install_initial
    - postgresql
    - every_election
    - django_manage_py_cron
    - lockrun
  handlers:
    - import_tasks: handlers.yml
  tasks:
  - name: Create apt-daily.timer.d directory
    file: path=/etc/systemd/system/apt-daily.timer.d state=directory

  - name: Prevent systemd daily update race condition
    template:
      src: "files/systemd/apt-daily.timer.conf"
      dest: "/etc/systemd/system/apt-daily.timer.d/apt-daily.timer.conf"

  - name: Start auto update again
    raw: systemctl start apt-daily.timer


  - name: Create the project directory.
    file: state=directory path={{ project_root }}

  - name: Create user.
    user:
      home: "{{ project_root }}/home"
      name: "{{ project_name }}"
      shell: "/bin/bash"
      state: present

  - name: Update the project directory.
    file: group={{ project_name }} owner={{ project_name }} mode=755 state=directory path={{ project_root }}

  - name: Create the code directory.
    file: group={{ project_name }} owner={{ project_name }} mode=755 state=directory path={{ project_root }}/code/

  - name: Change permissions.
    shell: "chown -R {{ project_name }}:{{ project_name }} {{ project_root }}"

  - name: Install nginx configuration file.
    template: src=files/conf/nginx.conf dest=/etc/nginx/sites-enabled/{{ project_name }}
    notify: restart nginx

  - name: Remove default nginx file.
    file:
      path: /etc/nginx/sites-enabled/default
      state: absent
    notify: restart nginx

  - name: Install systemd init scripts.
    template:
      src: "files/systemd/{{ item }}.service"
      dest: "/etc/systemd/system/{{ project_name }}_{{ item }}.service"
    with_items: "{{ initfiles }}"
    notify:
      - reload systemd
      - restart web frontend

  - name: Install systemd socket scripts.
    template:
      src: "files/systemd/{{ item }}.socket"
      dest: "/etc/systemd/system/{{ project_name }}_gunicorn.socket"
    with_items: "{{ initfiles }}"
    notify:
      - reload systemd
      - restart web frontend

  - name: systemg gunicorn tmpfiles.d
    template:
      src: "files/systemd/{{ item }}.tmpfiles"
      dest: "/etc/tmpfiles.d/{{ project_name }}_gunicorn.conf"
    with_items: "{{ initfiles }}"
    notify:
      - reload systemd
      - restart web frontend

  - name: "enable gunicorn"
    shell: "systemctl enable {{ project_name }}_gunicorn.socket"

  - name: "start gunicorn"
    shell: "systemctl start {{ project_name }}_gunicorn.socket"

  # - name: Add gunicorn to systemd
  #   systemd:
  #     name: "{{ project_name }}_gunicorn.socket"
  #     state: started
  #     enabled: yes

  - name: Install Who database backup script
    template:
      src: "files/scripts/backup_to_s3.sh"
      dest: "{{ project_root }}/backup_db_to_s3.sh"
      mode: "u+rwx"
      owner: "{{ project_name }}"



  - name: Set up handy bashrc file
    lineinfile:
      dest: "{{ project_root }}/home/.bashrc"
      line: 'cd && cd ../code && source ../env/bin/activate'

  - name: Set server dirty file
    file:
      path: "{{ project_root }}/home/server_dirty"
      state: touch
      mode: "u=rw,g=r,o=r"

- import_playbook: deploy.yml
